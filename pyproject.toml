[project]
name = "agentic-fleet"
version = "0.5.5"
description = "Minimal trio workflow helper built with Microsoft Agent Framework"
authors = [{ name = "Qredence", email = "contact@qredence.ai" }]
readme = "README.md"
license = { file = "LICENSE" }
keywords = ["agents", "ai", "magentic"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Framework :: AsyncIO",
    "Typing :: Typed",
]
dependencies = [
    "azure-ai-agents>=1.2.0b5,<2.0",
    "azure-identity>=1.25.1,<2.0",
    "azure-cosmos>=4.8.0,<5.0",
    "python-dotenv>=1.1.1,<2.0",
    "pyyaml>=6.0.3,<7.0",
    "requests>=2.32.5,<3.0",
    "pydantic>=2.12.0,<3.0",
    "tiktoken>=0.12.0,<1.0",
    "agent-framework",
    "agent-framework-core",
    "agent-framework-a2a",
    "agent-framework-azure-ai",
    "agent-framework-mem0",
    "agent-framework-redis",
    "agent-framework-devui",
    "mem0ai==1.0.0",                    # Pinned for stable memory API
    "rich>=13.7.0,<14.2",
    "prompt-toolkit>=3.0.47,<4.0",
    "ipykernel>=7.0.1,<8.0",
    "openai>=1.99.0,<2.6.1",              # Compatible with agent-framework requirements
    "azure-ai-evaluation>=1.12.0,<2.0",
]
requires-python = ">=3.12,<4"

[project.optional-dependencies]
# Core Azure integration
azure = ["azure-ai-agents>=1.2.0b5,<2.0", "azure-identity>=1.25.1,<2.0"]

# Memory and persistence features
memory = ["agent-framework-mem0", "agent-framework-redis", "mem0ai==1.0.0"]

# UI and interactive features
ui = [
    "agent-framework-devui",
    "rich>=13.7.0,<14.0",
    "prompt-toolkit>=3.0.47,<4.0",
]

# Evaluation and testing
evaluation = ["azure-ai-evaluation>=1.12.0,<2.0"]

# Complete installation with all features
all = ["agentic-fleet[azure,memory,ui,evaluation]"]

[project.scripts]


[project.urls]
Homepage = "https://github.com/Qredence/agentic-fleet"
Documentation = "https://github.com/Qredence/agentic-fleet/docs"
Repository = "https://github.com/Qredence/agentic-fleet"
Issues = "https://github.com/Qredence/agentic-fleet/issues"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.metadata]
allow-direct-references = true

[tool.hatch.build.targets.wheel]
packages = ["src/agenticfleet"]
only-include = ["src/agenticfleet"]

[tool.hatch.build.targets.sdist]
include = [
    "/src",
    "/tests",
    "/LICENSE",
    "/README.md",
    "/AGENTS.md",
    "/pyproject.toml",
]
exclude = ["/.github", "/var", "/logs", "/__pycache__", "*.pyc"]

[tool.uv.sources]
agent-framework-core = { git = "https://github.com/microsoft/agent-framework", subdirectory = "python/packages/core", rev = "e3aad8e4e0eb9411c589a4c3879b8af1d9faa621" }
agent-framework-a2a = { git = "https://github.com/microsoft/agent-framework", subdirectory = "python/packages/a2a", rev = "e3aad8e4e0eb9411c589a4c3879b8af1d9faa621" }
agent-framework-azure-ai = { git = "https://github.com/microsoft/agent-framework", subdirectory = "python/packages/azure-ai", rev = "e3aad8e4e0eb9411c589a4c3879b8af1d9faa621" }
agent-framework-mem0 = { git = "https://github.com/microsoft/agent-framework", subdirectory = "python/packages/mem0", rev = "e3aad8e4e0eb9411c589a4c3879b8af1d9faa621" }
agent-framework-redis = { git = "https://github.com/microsoft/agent-framework", subdirectory = "python/packages/redis", rev = "e3aad8e4e0eb9411c589a4c3879b8af1d9faa621" }
agent-framework-devui = { git = "https://github.com/microsoft/agent-framework", subdirectory = "python/packages/devui", rev = "e3aad8e4e0eb9411c589a4c3879b8af1d9faa621" }

# Development dependencies (uv's preferred format)
[dependency-groups]
dev = [
    "pytest>=8.4.2",
    "pytest-asyncio>=1.2.0",
    "pytest-cov>=6.0.0",
    "black>=25.9.0",
    "ruff>=0.14.0",
    "mypy>=1.18.2",
    "debugpy>=1.8.17",
    "pre-commit>=3.5.0",
    "types-PyYAML>=6.0.0",
    "types-requests>=2.31.0",
]

[tool.black]
target-version = ['py312']
line-length = 100
exclude = '''
/(
    \.git
  | \.mypy_cache
  | \.pytest_cache
  | \.ruff_cache
  | \.venv
  | node_modules
  | dist
  | build
)/
'''


[tool.ruff]
src = ["src"]
target-version = "py312"
line-length = 100


[tool.ruff.lint]
select = ["E", "F", "I", "UP", "B"]
ignore = ["E501"]


[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]

[tool.ruff.lint.isort]
known-first-party = ["agenticfleet"]

[tool.pytest.ini_options]
pythonpath = "src"
testpaths = ["tests"]


[tool.coverage.run]
source = ["src/agenticfleet"]
omit = ["*/tests/*", "*/__pycache__/*", "*/.venv/*"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if TYPE_CHECKING:",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
]

[tool.mypy]
python_version = "3.12"
strict = true
packages = ["agenticfleet"]
